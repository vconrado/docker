FROM ubuntu:14.04
LABEL maintainer="e-sensing team <esensing-team@dpi.inpe.br>"

VOLUME /data
VOLUME /var/lib/postgresql/data


# ##############################################################################
# Exporting SCIDB and EOWS WebServer Port to be able to access through host machine
EXPOSE 1239
EXPOSE 7654

ARG CLUSTER=esensing
ARG MAKE_J=4

# ##############################################################################
# Configuration variables
ENV HOST_IP=127.0.0.1
ENV NET_MASK=$HOST_IP/8
ENV DATA_DIR=/data
ENV SCIDB_USR=scidb
ENV SCIDB_PASS=scidb
ENV SCIDB_VER=16.9
ENV DEV_DIR=/home/$SCIDB_USR/Devel
ENV SCIDB_INSTALL_PATH=/opt/scidb/${SCIDB_VER}
ENV SCIDB_BUILD_TYPE=RelWithDebInfo
ENV SCIDB_SOURCE_PATH=${DEV_DIR}/scidb-${SCIDB_VER}
ENV SCIDB_BUILD_PATH=${SCIDB_SOURCE_PATH}/stage/build
ENV PATH=$SCIDB_INSTALL_PATH/bin:$PATH


# ##############################################################################
# Copying scripts
COPY files/wait_for_postgres.sh /usr/local/bin
RUN chmod +x /usr/local/bin/wait_for_postgres.sh

   
# ##############################################################################
# Creating scidb user
RUN groupadd $SCIDB_USR \
    && useradd $SCIDB_USR -s /bin/bash -m -g $SCIDB_USR \
    && echo $SCIDB_USR:$SCIDB_PASS | chpasswd  \
    && mkdir -p $DEV_DIR \
    && chown $SCIDB_USR:$SCIDB_USR $DEV_DIR \
    && chmod g-w /home/$SCIDB_USR

# ##############################################################################
# Instaling dependencies
RUN apt-get update \
    && apt-get install -y  wget \
						   apt-transport-https \
						   software-properties-common \
						   expect \
						   openssh-server \
						   openssh-client \
						   vim \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

WORKDIR $DEV_DIR

# ##############################################################################
# Downloading SciDB 16.9
RUN export SCIDB_URL="https://docs.google.com/uc?id=0BzNaZtoQsmy2OG1WcXhiai1rak0&export=download" \
	&& wget --no-verbose --output-document scidb-16.9.0.db1a98f.tgz\
        --load-cookies cookies.txt \
        "$SCIDB_URL `wget --no-verbose --output-document - \
            --save-cookies cookies.txt "$SCIDB_URL" | \
            grep --only-matching 'confirm=[^&]*'`" \
    && mkdir scidb-${SCIDB_VER} \
    && tar -xzf scidb-16.9.0.db1a98f.tgz -C scidb-${SCIDB_VER} \
    && rm scidb-16.9.0.db1a98f.tgz cookies.txt

WORKDIR scidb-${SCIDB_VER}

# ##############################################################################
RUN service ssh start \
    && ssh-keygen -f /root/.ssh/id_rsa -N '' \
    && mkdir /home/$SCIDB_USR/.ssh \
    && ssh-keygen -f /home/$SCIDB_USR/.ssh/id_rsa -N '' \
    && chmod go-rwx /home/$SCIDB_USR/.ssh \
    && cat /root/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys \
    && cat /root/.ssh/id_rsa.pub >> /home/$SCIDB_USR/.ssh/authorized_keys \
    && cat /home/$SCIDB_USR/.ssh/id_rsa.pub >> /home/$SCIDB_USR/.ssh/authorized_keys \
    && chown -R $SCIDB_USR:$SCIDB_USR /home/$SCIDB_USR \
    && ./deployment/deploy.sh access root NA "" $HOST_IP \
    && ./deployment/deploy.sh access $SCIDB_USR NA "" $HOST_IP \
    && ssh $HOST_IP date \
    && ./deployment/deploy.sh prepare_postgresql postgres postgres $NET_MASK $HOST_IP \
    && usermod -G $SCIDB_USR -a postgres \
    && chmod g+rx $DEV_DIR \
    && echo "export SCIDB_VER=16.9\n\
export SCIDB_INSTALL_PATH=${SCIDB_INSTALL_PATH}\n\
export SCIDB_BUILD_TYPE=RelWithDebInfo\n\
export SCIDB_SOURCE_PATH=/home/scidb/Devel/scidb-${SCIDB_VER} \n\
export SCIDB_BUILD_PATH=/home/scidb/Devel/scidb-${SCIDB_VER}/stage/build\n\
export PATH=$SCIDB_INSTALL_PATH/bin:$PATH" | tee -a /root/.bashrc /home/$SCIDB_USR/.bashrc \
    && ./deployment/deploy.sh prepare_toolchain $HOST_IP \
    && ./run.py setup --force \
    && ./run.py make -j${MAKE_J} \
    && yes n | ./run.py install --light \
    # Moving SciDB extern to SCIDB_INSTALL_PATH to fix Murmurhash dependency
    && mv ${SCIDB_SOURCE_PATH}/extern ${SCIDB_INSTALL_PATH} \
    && sudo -u postgres psql -c "ALTER USER "postgres" WITH PASSWORD 'postgres';" \
    && POSTGRES_HOME=$(echo ~postgres) \    
 	  && mkdir -p ${DATA_DIR}/scidb \
    && chown -R ${SCIDB_USR}:${SCIDB_USR} ${DATA_DIR} \
    && chown -R scidb:scidb $SCIDB_INSTALL_PATH \
    && git clone https://github.com/Paradigm4/dev_tools \
    && cd dev_tools \
    && make \
    && cp *.so $SCIDB_INSTALL_PATH/lib/scidb/plugins \
    && cd .. \
    && rm -rf dev_tools \
    && echo "deb https://cran.uni-muenster.de/bin/linux/ubuntu/ trusty/" | tee -a /etc/apt/sources.list \
    && apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9 \
    && gpg --keyserver keyserver.ubuntu.com --recv-key E084DAB9 \
    && gpg -a --export E084DAB9 | sudo apt-key add - \
    && add-apt-repository ppa:ubuntugis/ubuntugis-unstable \
    && apt-get update \
    && apt-get install -y libcurl4-openssl-dev \
                          libssl-dev openssl \
                          libxml2-dev \
                          libproj-dev \
                          libudunits2-dev \
                          libgdal20 gdal-bin libgdal-dev \
                          libgl1-mesa-dev freeglut3 freeglut3-dev \
                          r-base r-base-dev \
    && apt-get clean && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && rm -rf ${DEV_DIR}
# ##############################################################################
	



RUN R -e "install.packages('devtools', repos='https://ftp.gwdg.de/pub/misc/cran');\
library(devtools);\
install.packages('tidyverse', repos='https://ftp.gwdg.de/pub/misc/cran');\
library(tidyverse);\
install.packages('plyr', repos='https://ftp.gwdg.de/pub/misc/cran');\
library(plyr);\
install.packages('rgdal', repos='https://ftp.gwdg.de/pub/misc/cran');\
library(rgdal);\
install.packages('sf', repos='https://ftp.gwdg.de/pub/misc/cran');\
library(sf);\
install.packages('rgl', repos='https://ftp.gwdg.de/pub/misc/cran');\
library(rgl);\
install.packages('TSdist', repos='https://ftp.gwdg.de/pub/misc/cran');\
devtools::install_github('e-sensing/sits');\
library(sits)"

# ##############################################################################
# Creating docker-entry.sh
RUN echo '#!/bin/bash\n\
sudo service ssh start \n\
sudo service postgresql start \n\
wait_for_postgres.sh\n' | tee -a /docker-entrypoint.sh \
    && echo "if [ ! -f ${DATA_DIR}/scidb.config.lock ]; then\n\
      sudo touch ${DATA_DIR}/scidb.config.lock\n\
      echo 'First startup' \n\
      echo 'Configurating SciDB cluster [$CLUSTER]' \n\
      # Creating Data folder and changing owner to scidb\n\
      sudo mkdir -p $DATA_DIR/scidb\n\
      sudo chown -R scidb:scidb $DATA_DIR/scidb\n\
      create_scidb_cluster.sh $CLUSTER\n\
      scidb.py startall $CLUSTER\n\
      # Configuring SciDB Plugins\n\
      iquery -aq \"load_library('dev_tools')\"\n\
      echo \"Installing Stream...\"\n\
      iquery -aq \"install_github('paradigm4/stream', 'd3f5393e5a9a8eba6f8ff777105ef031f48e3d3d');\"\n\
      iquery -aq \"load_library('stream');\"\n\
    else\n\
      scidb.py startall $CLUSTER\n\
    fi" | tee -a /docker-entrypoint.sh \
    && echo "trap \"scidb.py stopall $CLUSTER; sudo service postgresql stop\" EXIT HUP INT QUIT TERM \n\
bash " | tee -a /docker-entrypoint.sh \
    && chmod +x /docker-entrypoint.sh\ 
    && cat /home/${SCIDB_USR}/.ssh/id_rsa.pub >> /root/.ssh/authorized_keys


RUN echo 'scidb ALL=(ALL:ALL) NOPASSWD:ALL' | sudo EDITOR='tee -a' visudo

COPY files/create_scidb_cluster.sh /usr/local/bin
RUN  chmod +x /usr/local/bin/create_scidb_cluster.sh

WORKDIR /home/${SCIDB_USR}
USER scidb
ENTRYPOINT  /docker-entrypoint.sh
